 static void Main(string[] args)
        {
            const string ComandStartGame = "1";
            const string ComandShowRecords = "2";
            const string ComandExitGame = "3";

            bool isProgramOlpen = true;
            Game game = new Game();

            while (isProgramOlpen)
            {
                switch (Console.ReadLine())
                {
                    case ComandStartGame:
                        game.Start();

                        break;
                    case ComandShowRecords:

                        break;
                    case ComandExitGame:
                        isProgramOlpen = false;
                        break;

                }
            }
        }

    }
    class Game
    {


        private static string MapPath = "map.txt";
        public void Start()
        {
            char[,] map = ReadMap();
            bool isRunning = true;

            while (isRunning)
            {
                DrawMap(map);


            }
        }





        private void DrawMap(char[,] map)
        {
            Console.SetCursorPosition(0, 5);

            for (int x = 0; x < map.GetLength(0); x++)
            {
                for (int y = 0; y < map.GetLength(1); y++)
                {
                    Console.Write(map[x, y]);
                }

                Console.WriteLine();
            }

        }
        private char[,] ReadMap()
        {
            string[] fileMap = File.ReadAllLines(MapPath);
            char[,] map = new char[fileMap.Length, GetMaxLengthOfLines(fileMap)];

            for (int x = 0; x < map.GetLength(0); x++)
            {
                for (int y = 0; y < map.GetLength(1); y++)
                {
                    map[x, y] = fileMap[x][y];
                    Console.Write(map[x, y]);
                }

                Console.WriteLine();
            }
            return map;

        }
        private static int GetMaxLengthOfLines(string[] lines)
        {
            int maxLines = lines[0].Length;

            foreach (var line in lines)
            {
                if (line.Length > maxLines)
                {
                    maxLines = line.Length;

                }
            }

            return maxLines;
        }
    }
    class Player
    {
        public int PlayerY = 26;
        public int PlayerX = 15;

        public void DrawPlayer()
        {
            Console.SetCursorPosition(PlayerY, PlayerX);
            Console.WriteLine("@");
        }

    }
}